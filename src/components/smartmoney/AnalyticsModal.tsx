// src/components/smartMoney/AnalyticsModal.tsx
import React, { useState, useMemo } from 'react';
import {
  View,
  Text,
  Modal,
  ScrollView,
  TouchableOpacity,
  StyleSheet,
  Dimensions,
  Share,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { BlurView } from 'expo-blur';
import { LinearGradient } from 'expo-linear-gradient';
import { LineChart, BarChart, PieChart } from 'react-native-chart-kit';

interface Analytics {
  totalIncome: number;
  totalExpenses: number;
  netSavings: number;
  savingsRate: number;
  categoryBreakdown: Array<{
    category: string;
    amount: number;
    percentage: number;
    color: string;
    icon: string;
  }>;
  insights: Array<{
    type: 'positive' | 'warning' | 'info';
    title: string;
    description: string;
    icon: string;
  }>;
}

interface AnalyticsModalProps {
  visible: boolean;
  analytics: Analytics | null;
  onClose: () => void;
  currency?: string;
}

const { width } = Dimensions.get('window');
const chartWidth = width - 40;

export default function AnalyticsModal({ 
  visible, 
  analytics, 
  onClose, 
  currency = 'USD' 
}: AnalyticsModalProps) {
  const [activeTab, setActiveTab] = useState<'overview' | 'trends' | 'categories'>('overview');
  const [timeframe, setTimeframe] = useState<'week' | 'month' | 'quarter' | 'year'>('month');

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency,
      minimumFractionDigits: 0,
      maximumFractionDigits: 2,
    }).format(amount);
  };

  const chartConfig = {
    backgroundColor: '#ffffff',
    backgroundGradientFrom: '#ffffff',
    backgroundGradientTo: '#ffffff',
    decimalPlaces: 0,
    color: (opacity = 1) => `rgba(16, 185, 129, ${opacity})`,
    labelColor: (opacity = 1) => `rgba(107, 114, 128, ${opacity})`,
    style: {
      borderRadius: 16,
    },
    propsForDots: {
      r: '6',
      strokeWidth: '2',
      stroke: '#10B981',
    },
  };

  const pieChartData = useMemo(() => {
    if (!analytics?.categoryBreakdown) return [];
    
    return analytics.categoryBreakdown.slice(0, 5).map((category, index) => ({
      name: category.category,
      population: category.amount,
      color: category.color,
      legendFontColor: '#374151',
      legendFontSize: 12,
    }));
  }, [analytics]);

  const trendData = useMemo(() => {
    // Mock trend data - in real app, this would come from the analytics
    const labels = ['Week 1', 'Week 2', 'Week 3', 'Week 4'];
    const data = [1200, 1450, 980, 1320];
    
    return {
      labels,
      datasets: [{
        data,
        color: (opacity = 1) => `rgba(16, 185, 129, ${opacity})`,
        strokeWidth: 3,
      }],
    };
  }, [timeframe]);

  const shareAnalytics = async () => {
    if (!analytics) return;

    const message = `My ${timeframe} financial summary:
ðŸ’° Income: ${formatCurrency(analytics.totalIncome)}
ðŸ’¸ Expenses: ${formatCurrency(analytics.totalExpenses)}
ðŸ’¡ Savings: ${formatCurrency(analytics.netSavings)} (${analytics.savingsRate.toFixed(1)}%)

Top spending category: ${analytics.categoryBreakdown[0]?.category} (${analytics.categoryBreakdown[0]?.percentage.toFixed(1)}%)

Generated by Smart Money ðŸ“Š`;

    try {
      await Share.share({ message });
    } catch (error) {
      console.error('Share error:', error);
    }
  };

  const renderOverview = () => (
    <ScrollView style={styles.tabContent} showsVerticalScrollIndicator={false}>
      {/* Summary Cards */}
      <View style={styles.summaryGrid}>
        <LinearGradient
          colors={['#10B981', '#059669']}
          style={styles.summaryCard}
        >
          <View style={styles.summaryCardHeader}>
            <Ionicons name="trending-up" size={24} color="white" />
            <Text style={styles.summaryCardTitle}>Income</Text>
          </View>
          <Text style={styles.summaryCardAmount}>
            {formatCurrency(analytics?.totalIncome || 0)}
          </Text>
          <Text style={styles.summaryCardSubtext}>This {timeframe}</Text>
        </LinearGradient>

        <LinearGradient
          colors={['#EF4444', '#DC2626']}
          style={styles.summaryCard}
        >
          <View style={styles.summaryCardHeader}>
            <Ionicons name="trending-down" size={24} color="white" />
            <Text style={styles.summaryCardTitle}>Expenses</Text>
          </View>
          <Text style={styles.summaryCardAmount}>
            {formatCurrency(analytics?.totalExpenses || 0)}
          </Text>
          <Text style={styles.summaryCardSubtext}>This {timeframe}</Text>
        </LinearGradient>

        <LinearGradient
          colors={['#3B82F6', '#2563EB']}
          style={[styles.summaryCard, styles.summaryCardWide]}
        >
          <View style={styles.summaryCardHeader}>
            <Ionicons name="wallet" size={24} color="white" />
            <Text style={styles.summaryCardTitle}>Net Savings</Text>
          </View>
          <View style={styles.savingsRow}>
            <Text style={styles.summaryCardAmount}>
              {formatCurrency(analytics?.netSavings || 0)}
            </Text>
            <View style={styles.savingsRate}>
              <Text style={styles.savingsRateText}>
                {analytics?.savingsRate.toFixed(1) || 0}%
              </Text>
            </View>
          </View>
          <Text style={styles.summaryCardSubtext}>
            {(analytics?.savingsRate || 0) > 20 ? 'Excellent!' : 
             (analytics?.savingsRate || 0) > 10 ? 'Good progress' : 
             'Room for improvement'}
          </Text>
        </LinearGradient>
      </View>

      {/* AI Insights */}
      {analytics?.insights && analytics.insights.length > 0 && (
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>AI Insights</Text>
          {analytics.insights.map((insight, index) => (
            <View key={index} style={styles.insightCard}>
              <View style={[
                styles.insightIcon,
                insight.type === 'positive' && styles.insightIconPositive,
                insight.type === 'warning' && styles.insightIconWarning,
                insight.type === 'info' && styles.insightIconInfo,
              ]}>
                <Text style={styles.insightEmoji}>{insight.icon}</Text>
              </View>
              <View style={styles.insightContent}>
                <Text style={styles.insightTitle}>{insight.title}</Text>
                <Text style={styles.insightDescription}>{insight.description}</Text>
              </View>
            </View>
          ))}
        </View>
      )}

      {/* Quick Stats */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Quick Stats</Text>
        <View style={styles.statsGrid}>
          <View style={styles.statItem}>
            <Text style={styles.statValue}>
              {analytics?.categoryBreakdown?.length || 0}
            </Text>
            <Text style={styles.statLabel}>Categories</Text>
          </View>
          <View style={styles.statItem}>
            <Text style={styles.statValue}>
              {formatCurrency((analytics?.totalExpenses || 0) / 30)}
            </Text>
            <Text style={styles.statLabel}>Daily Avg</Text>
          </View>
          <View style={styles.statItem}>
            <Text style={styles.statValue}>
              {analytics?.categoryBreakdown?.[0]?.category.slice(0, 8) || 'N/A'}
            </Text>
            <Text style={styles.statLabel}>Top Category</Text>
          </View>
        </View>
      </View>
    </ScrollView>
  );

  const renderTrends = () => (
    <ScrollView style={styles.tabContent} showsVerticalScrollIndicator={false}>
      {/* Timeframe Selector */}
      <View style={styles.timeframeSelector}>
        {(['week', 'month', 'quarter', 'year'] as const).map((period) => (
          <TouchableOpacity
            key={period}
            style={[
              styles.timeframeButton,
              timeframe === period && styles.timeframeButtonActive,
            ]}
            onPress={() => setTimeframe(period)}
          >
            <Text style={[
              styles.timeframeButtonText,
              timeframe === period && styles.timeframeButtonTextActive,
            ]}>
              {period.charAt(0).toUpperCase() + period.slice(1)}
            </Text>
          </TouchableOpacity>
        ))}
      </View>

      {/* Spending Trend Chart */}
      <View style={styles.chartContainer}>
        <Text style={styles.chartTitle}>Spending Trends</Text>
        <LineChart
          data={trendData}
          width={chartWidth}
          height={220}
          chartConfig={chartConfig}
          bezier
          style={styles.chart}
        />
      </View>

      {/* Bar Chart for Category Comparison */}
      <View style={styles.chartContainer}>
        <Text style={styles.chartTitle}>Category Spending</Text>
        <BarChart
          data={{
            labels: analytics?.categoryBreakdown?.slice(0, 4).map(c => c.category.slice(0, 8)) || [],
            datasets: [{
              data: analytics?.categoryBreakdown?.slice(0, 4).map(c => c.amount) || [],
            }],
          }}
          width={chartWidth}
          height={220}
          chartConfig={chartConfig}
          style={styles.chart}
          yAxisLabel="$"
          yAxisSuffix=""
          showValuesOnTopOfBars
        />
      </View>

      {/* Savings Progress */}
      <View style={styles.progressSection}>
        <Text style={styles.chartTitle}>Savings Progress</Text>
        <View style={styles.progressBar}>
          <View 
            style={[
              styles.progressFill,
              { width: `${Math.min((analytics?.savingsRate || 0) * 5, 100)}%` }
            ]}
          />
        </View>
        <View style={styles.progressLabels}>
          <Text style={styles.progressLabel}>0%</Text>
          <Text style={styles.progressLabel}>20%</Text>
        </View>
        <Text style={styles.progressText}>
          Current savings rate: {analytics?.savingsRate.toFixed(1) || 0}%
        </Text>
      </View>
    </ScrollView>
  );

  const renderCategories = () => (
    <ScrollView style={styles.tabContent} showsVerticalScrollIndicator={false}>
      {/* Pie Chart */}
      <View style={styles.chartContainer}>
        <Text style={styles.chartTitle}>Spending Distribution</Text>
        {pieChartData.length > 0 && (
          <PieChart
            data={pieChartData}
            width={chartWidth}
            height={220}
            chartConfig={chartConfig}
            accessor="population"
            backgroundColor="transparent"
            paddingLeft="15"
            style={styles.chart}
          />
        )}
      </View>

      {/* Category Breakdown */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Category Details</Text>
        {analytics?.categoryBreakdown?.map((category, index) => (
          <View key={index} style={styles.categoryCard}>
            <View style={styles.categoryHeader}>
              <View style={styles.categoryLeft}>
                <View style={[
                  styles.categoryIconContainer,
                  { backgroundColor: category.color + '20' }
                ]}>
                  <Text style={styles.categoryEmoji}>{category.icon}</Text>
                </View>
                <View style={styles.categoryInfo}>
                  <Text style={styles.categoryName}>{category.category}</Text>
                  <Text style={styles.categoryPercentage}>
                    {category.percentage.toFixed(1)}% of spending
                  </Text>
                </View>
              </View>
              <Text style={styles.categoryAmount}>
                {formatCurrency(category.amount)}
              </Text>
            </View>
            
            {/* Progress Bar */}
            <View style={styles.categoryProgressBar}>
              <View 
                style={[
                  styles.categoryProgressFill,
                  { 
                    width: `${category.percentage}%`,
                    backgroundColor: category.color
                  }
                ]}
              />
            </View>
          </View>
        ))}
      </View>
    </ScrollView>
  );

  if (!analytics) {
    return null;
  }

  return (
    <Modal visible={visible} animationType="slide" presentationStyle="pageSheet">
      <View style={styles.container}>
        {/* Header */}
        <BlurView intensity={100} style={styles.header}>
          <View style={styles.headerContent}>
            <TouchableOpacity onPress={onClose} style={styles.headerButton}>
              <Ionicons name="close" size={24} color="#333" />
            </TouchableOpacity>
            <Text style={styles.headerTitle}>Analytics</Text>
            <TouchableOpacity onPress={shareAnalytics} style={styles.headerButton}>
              <Ionicons name="share" size={24} color="#333" />
            </TouchableOpacity>
          </View>
        </BlurView>

        {/* Tab Navigation */}
        <View style={styles.tabNavigation}>
          {[
            { id: 'overview', label: 'Overview', icon: 'analytics' },
            { id: 'trends', label: 'Trends', icon: 'trending-up' },
            { id: 'categories', label: 'Categories', icon: 'pie-chart' },
          ].map((tab) => (
            <TouchableOpacity
              key={tab.id}
              style={[
                styles.tabButton,
                activeTab === tab.id && styles.tabButtonActive,
              ]}
              onPress={() => setActiveTab(tab.id as any)}
            >
              <Ionicons
                name={tab.icon as any}
                size={20}
                color={activeTab === tab.id ? '#10B981' : '#6B7280'}
              />
              <Text style={[
                styles.tabButtonText,
                activeTab === tab.id && styles.tabButtonTextActive,
              ]}>
                {tab.label}
              </Text>
            </TouchableOpacity>
          ))}
        </View>

        {/* Content */}
        {activeTab === 'overview' && renderOverview()}
        {activeTab === 'trends' && renderTrends()}
        {activeTab === 'categories' && renderCategories()}
      </View>
    </Modal>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F9FAFB',
  },
  header: {
    paddingTop: 60,
    paddingBottom: 16,
    paddingHorizontal: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  headerContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  headerButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#F3F4F6',
    alignItems: 'center',
    justifyContent: 'center',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#1F2937',
  },
  tabNavigation: {
    flexDirection: 'row',
    backgroundColor: 'white',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  tabButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 16,
    gap: 8,
  },
  tabButtonActive: {
    borderBottomWidth: 2,
    borderBottomColor: '#10B981',
  },
  tabButtonText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#6B7280',
  },
  tabButtonTextActive: {
    color: '#10B981',
    fontWeight: '600',
  },
  tabContent: {
    flex: 1,
    padding: 20,
  },
  summaryGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 12,
    marginBottom: 24,
  },
  summaryCard: {
    flex: 1,
    minWidth: (width - 52) / 2,
    borderRadius: 16,
    padding: 20,
  },
  summaryCardWide: {
    width: '100%',
    flex: 'none',
  },
  summaryCardHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
    gap: 8,
  },
  summaryCardTitle: {
    fontSize: 14,
    fontWeight: '500',
    color: 'rgba(255,255,255,0.9)',
  },
  summaryCardAmount: {
    fontSize: 24,
    fontWeight: '700',
    color: 'white',
    marginBottom: 4,
  },
  summaryCardSubtext: {
    fontSize: 12,
    color: 'rgba(255,255,255,0.8)',
  },
  savingsRow: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 16,
  },
  savingsRate: {
    backgroundColor: 'rgba(255,255,255,0.2)',
    borderRadius: 12,
    paddingHorizontal: 12,
    paddingVertical: 6,
  },
  savingsRateText: {
    fontSize: 16,
    fontWeight: '600',
    color: 'white',
  },
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#1F2937',
    marginBottom: 16,
  },
  insightCard: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 2,
  },
  insightIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  insightIconPositive: {
    backgroundColor: '#D1FAE5',
  },
  insightIconWarning: {
    backgroundColor: '#FEF3C7',
  },
  insightIconInfo: {
    backgroundColor: '#DBEAFE',
  },
  insightEmoji: {
    fontSize: 18,
  },
  insightContent: {
    flex: 1,
  },
  insightTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 4,
  },
  insightDescription: {
    fontSize: 14,
    color: '#6B7280',
    lineHeight: 20,
  },
  statsGrid: {
    flexDirection: 'row',
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 2,
  },
  statItem: {
    flex: 1,
    alignItems: 'center',
  },
  statValue: {
    fontSize: 18,
    fontWeight: '700',
    color: '#1F2937',
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 12,
    color: '#6B7280',
  },
  timeframeSelector: {
    flexDirection: 'row',
    backgroundColor: '#F3F4F6',
    borderRadius: 12,
    padding: 4,
    marginBottom: 24,
  },
  timeframeButton: {
    flex: 1,
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 8,
    alignItems: 'center',
  },
  timeframeButtonActive: {
    backgroundColor: 'white',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  timeframeButtonText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#6B7280',
  },
  timeframeButtonTextActive: {
    color: '#10B981',
    fontWeight: '600',
  },
  chartContainer: {
    backgroundColor: 'white',
    borderRadius: 16,
    padding: 16,
    marginBottom: 24,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 2,
  },
  chartTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 16,
  },
  chart: {
    borderRadius: 16,
  },
  progressSection: {
    backgroundColor: 'white',
    borderRadius: 16,
    padding: 20,
    marginBottom: 24,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 2,
  },
  progressBar: {
    height: 8,
    backgroundColor: '#F3F4F6',
    borderRadius: 4,
    marginBottom: 8,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#10B981',
    borderRadius: 4,
  },
  progressLabels: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  progressLabel: {
    fontSize: 12,
    color: '#6B7280',
  },
  progressText: {
    fontSize: 14,
    color: '#374151',
    textAlign: 'center',
  },
  categoryCard: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 2,
  },
  categoryHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 12,
  },
  categoryLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  categoryIconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  categoryEmoji: {
    fontSize: 18,
  },
  categoryInfo: {
    flex: 1,
  },
  categoryName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 2,
  },
  categoryPercentage: {
    fontSize: 12,
    color: '#6B7280',
  },
  categoryAmount: {
    fontSize: 16,
    fontWeight: '700',
    color: '#1F2937',
  },
  categoryProgressBar: {
    height: 6,
    backgroundColor: '#F3F4F6',
    borderRadius: 3,
    overflow: 'hidden',
  },
  categoryProgressFill: {
    height: '100%',
    borderRadius: 3,
  },
});